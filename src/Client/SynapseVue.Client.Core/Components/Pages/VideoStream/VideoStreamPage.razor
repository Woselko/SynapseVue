@page "/videostream"
@using SynapseVue.Client.Core.Controllers.Media
@using SynapseVue.Client.Core.Controllers.VideoStream
@using SynapseVue.Shared.Dtos.Media
@inherits AppComponentBase
@inject HttpClient Http

<div class="page-container">
    @if (isLoading)
    {
        <div class="loading-contianer">
            <BitSpinner Size="BitSpinnerSize.Large"></BitSpinner>
        </div>
    }
    <div class="page-row">
    <h1 class="page-title">Video Stream</h1>
    <BitButton OnClick="StartStream" Disabled="@isStreaming">Start</BitButton>
    <BitButton OnClick="CaptureImage" Disabled="@(!isStreaming)">Capture</BitButton>
    <BitButton OnClick="SaveImage" Disabled="@(!isStreaming)">Save Image</BitButton>
    <BitButton OnClick="StopStream" Disabled="@(!isStreaming)">Stop</BitButton>
    </div>
    <div hidden="@(!isStreaming)">
        <img id="videoFrame" src="@videoSrc" alt="Video Frame" />
    </div>
</div>
<script>
    function captureImage() {
        var img = document.getElementById('videoFrame');
        var canvas = document.createElement('canvas');
        canvas.width = img.naturalWidth;
        canvas.height = img.naturalHeight;
        var ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        
        canvas.toBlob(function(blob) {
            var link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'capture.jpg';
            link.click();
        }, 'image/jpeg');
    }

    function saveImage() {
        var img = document.getElementById('videoFrame');
        var canvas = document.createElement('canvas');
        canvas.width = img.naturalWidth/4;
        canvas.height = img.naturalHeight/4;
        var ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);

        canvas.toBlob(function(blob) {
            var reader = new FileReader();
            reader.readAsDataURL(blob);
            reader.onloadend = function() {
                var base64data = reader.result;
                console.log("Base64 Image Data: ", base64data); // Log base64 data for debugging
                DotNet.invokeMethodAsync('SynapseVue.Client.Core', 'ReceiveImage', base64data)
                    .then(() => {
                        console.log("Image sent to Blazor successfully.");
                    })
                    .catch(err => {
                        console.error("Error sending image to Blazor: ", err);
                    });
            };
        }, 'image/jpeg');
    }
</script>
@* <div>
    <button @onclick="StopStream" >Stop</button>
</div>
    <canvas id="player" style="background: #000;">
      Your browser sucks.
    </canvas>
  <script src="mjpeg.js"></script>
  <script>
    //"https://gist.github.com/codebrainz/eeeeead894e8bdff059b/revisions"
    // var player = new MJPEG.Player("player", "http://localhost:6030/api/videostream/get");
    var player = new MJPEG.Player("player", "http://10.0.2.2:6030/api/videostream/get");
    player.start();
  </script> *@


@code {
 
}
